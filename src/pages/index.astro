---
// index.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="CS2 Line-ups Viewer">
  <main class="max-w-5xl mx-auto p-4">
    <h1 class="text-4xl font-bold text-center mb-6 text-[#7877c6]">CS2 Line-ups Viewer</h1>

    <!-- Barra de búsqueda, Selector de Mapa y Selector de Utilidad -->
    <div class="flex flex-col sm:flex-row gap-4 mb-6 items-center justify-center">
      <!-- Barra de Búsqueda -->
      <input
        id="searchBar"
        type="text"
        placeholder="Buscar videos..."
        class="flex-grow bg-neutral-800 text-white placeholder-gray-400 border border-neutral-700 rounded p-2"
      />

      <!-- Selector de Mapa -->
      <select id="mapFilter" class="w-full sm:w-[180px] bg-neutral-800 text-white border border-neutral-700 rounded p-2">
        <option value="all">Seleccionar Mapa</option>
        <option value="dust2">Dust 2</option>
        <option value="inferno">Inferno</option>
        <option value="mirage">Mirage</option>
        <option value="ancient">Ancient</option>
        <option value="anubis">Anubis</option>
        <option value="vertigo">Vertigo</option>
        <option value="nuke">Nuke</option>
      </select>

      <!-- Selector de Utilidad -->
      <select id="utilityFilter" class="w-full sm:w-[180px] bg-neutral-800 text-white border border-neutral-700 rounded p-2">
        <option value="all">Seleccionar Utilidad</option>
        <option value="Smoke">Humos</option>
        <option value="Molotov">Molotov</option>
        <option value="Flash">Flash</option>
      </select>
    </div>

    <!-- Galería de Videos -->
    <div id="videoGallery" class="grid grid-cols-1 sm:grid-cols-2 gap-6">
      <!-- Aquí se mostrarán los videos filtrados -->
    </div>
  </main>

  <script>
    // Definir el tipo de los videos
    interface Video {
      id: number;
      title: string;
      map: string;
      type: string;
      video: string;  // Cambiado de 'file' a 'video'
    }

    // Referencias a los elementos del DOM
    const videoGallery = document.getElementById('videoGallery');
    const mapFilter = document.getElementById('mapFilter') as HTMLSelectElement | null;
    const utilityFilter = document.getElementById('utilityFilter') as HTMLSelectElement | null;
    const searchBar = document.getElementById('searchBar') as HTMLInputElement | null;

    let currentVideos: Video[] = [];

    // Función para cargar videos desde un archivo JSON
    async function loadVideos(map: string) {
      if (!videoGallery) return;

      if (map === 'all') {
        videoGallery.innerHTML = '<p class="text-center text-white">Selecciona un mapa para ver los videos.</p>';
        currentVideos = [];
        return;
      }
      try {
        const response = await fetch(`${import.meta.env.BASE_URL}/data/${map}.json`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const text = await response.text();
        console.log("Respuesta del servidor:", text); // Para depuración
        currentVideos = JSON.parse(text);
        renderVideos();
      } catch (error) {
        console.error('Error cargando los videos:', error);
        videoGallery.innerHTML = '<p class="text-center text-red-500">Error al cargar los videos. Por favor, intenta de nuevo más tarde.</p>';
        currentVideos = [];
      }
    }

    // Función para renderizar los videos filtrados
    function renderVideos() {
      if (!videoGallery || !utilityFilter || !searchBar) return;

      const utilityValue = utilityFilter.value.toLowerCase();
      const searchValue = searchBar.value.toLowerCase();

      // Filtrar videos según los filtros seleccionados
      const filteredVideos = currentVideos.filter(video => {
        const matchesUtility = utilityValue === 'all' || video.type.toLowerCase() === utilityValue;
        const matchesSearch = video.title.toLowerCase().includes(searchValue);
        return matchesUtility && matchesSearch;
      });

      // Renderizar videos en la galería
      videoGallery.innerHTML = '';
      filteredVideos.forEach(video => {
        const videoElement = document.createElement('div');
        videoElement.classList.add('bg-neutral-800', 'border', 'border-neutral-700', 'rounded', 'overflow-hidden', 'shadow-lg', 'p-4', 'flex', 'flex-col', 'justify-between');
        videoElement.innerHTML = `
          <iframe 
            src="https://www.youtube.com/embed/${getYouTubeVideoId(video.video)}" 
            frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
            allowfullscreen
            class="w-full h-[300px] mb-3 rounded"
          ></iframe>
          <div>
            <h3 class="text-xl font-bold text-white mb-1">${video.title}</h3>
            <div class="flex justify-between items-center">
              <p class="font-semibold text-[#7877c6]">${video.map}</p>
              <span class="text-gray-300">${video.type}</span>
            </div>
          </div>
        `;
        videoGallery.appendChild(videoElement);
      });
    }

    // Función para extraer el ID del video de YouTube de la URL
    function getYouTubeVideoId(url: string): string {
      const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
      const match = url.match(regExp);
      return (match && match[2].length === 11) ? match[2] : '';
    }

    // Manejar cambios en el filtro de mapa
    mapFilter?.addEventListener('change', async (e) => {
      const mapValue = (e.target as HTMLSelectElement).value.toLowerCase();
      await loadVideos(mapValue);
    });

    // Manejar cambios en los filtros de utilidad y búsqueda
    utilityFilter?.addEventListener('change', renderVideos);
    searchBar?.addEventListener('input', renderVideos);

    // Cargar videos iniciales
    loadVideos('all');
  </script>
</Layout>
