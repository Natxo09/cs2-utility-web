---
// index.astro
import Layout from '../layouts/Layout.astro';

// Añade este log al principio del archivo
console.log("BASE_URL:", import.meta.env.BASE_URL);

const basePath = import.meta.env.BASE_URL.endsWith('/')
  ? import.meta.env.BASE_URL
  : `${import.meta.env.BASE_URL}/`;
---

<Layout title="CS2 Line-ups Viewer">
  <div class="flex flex-col min-h-screen">
    <main class="flex-grow">
      <div class="max-w-6xl mx-auto p-4">
        <h1 class="text-center mb-12 relative">
          <span class="text-5xl font-extrabold uppercase tracking-wider text-gray-200 inline-block transform skew-x-[-15deg] px-4 py-2 bg-gradient-to-r from-gray-800 to-gray-900 border-b-4 border-[#e0a82e] shadow-lg">
            CS2 Line-ups
            <span class="block text-3xl text-[#7877c6]">Viewer</span>
          </span>
        </h1>

        <!-- Barra de búsqueda, Selector de Mapa, Selector de Utilidad y Selector de Bando -->
        <div class="flex flex-col gap-4 mb-8">
          <!-- Barra de Búsqueda -->
          <input
            id="searchBar"
            type="text"
            placeholder="Buscar videos..."
            class="w-full bg-neutral-800 text-white placeholder-gray-400 border border-neutral-700 rounded-lg p-3 focus:ring-2 focus:ring-[#7877c6] transition duration-300"
          />

          <div class="flex flex-col sm:flex-row gap-4">
            <!-- Selector de Mapa -->
            <select id="mapFilter" class="w-full sm:w-1/3 bg-neutral-800 text-white border border-neutral-700 rounded-lg p-3 appearance-none cursor-pointer focus:ring-2 focus:ring-[#7877c6] transition duration-300 bg-[url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20width%3D%2220%22%20height%3D%2220%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M7%207l3-3%203%203m0%206l-3%203-3-3%22%20fill%3D%22none%22%20stroke%3D%22%23fff%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%2F%3E%3C%2Fsvg%3E')] bg-no-repeat bg-[right_0.5rem_center] pr-8">
              <option value="all">Seleccionar Mapa</option>
              <option value="dust2">Dust 2</option>
              <option value="inferno">Inferno</option>
              <option value="mirage">Mirage</option>
              <option value="ancient">Ancient</option>
              <option value="anubis">Anubis</option>
              <option value="vertigo">Vertigo</option>
              <option value="nuke">Nuke</option>
            </select>

            <!-- Selector de Utilidad -->
            <select id="utilityFilter" class="w-full sm:w-1/3 bg-neutral-800 text-white border border-neutral-700 rounded-lg p-3 appearance-none cursor-pointer focus:ring-2 focus:ring-[#7877c6] transition duration-300 bg-[url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20width%3D%2220%22%20height%3D%2220%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M7%207l3-3%203%203m0%206l-3%203-3-3%22%20fill%3D%22none%22%20stroke%3D%22%23fff%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%2F%3E%3C%2Fsvg%3E')] bg-no-repeat bg-[right_0.5rem_center] pr-8">
              <option value="all">Seleccionar Utilidad</option>
              <option value="Smoke">Humos</option>
              <option value="Molotov">Molotov</option>
              <option value="Flash">Flash</option>
            </select>

            <!-- Selector de Bando -->
            <div class="flex justify-center sm:justify-end sm:w-1/3">
              <div class="inline-flex rounded-md shadow-sm" role="group">
                <label class="inline-flex items-center">
                  <input type="radio" name="sideFilter" value="all" checked class="sr-only">
                  <span class="px-5 py-2.5 text-base font-medium text-white bg-neutral-700 border border-neutral-600 rounded-l-lg hover:bg-neutral-600 focus:z-10 focus:ring-2 focus:ring-[#7877c6] focus:text-white cursor-pointer">
                    Todos
                  </span>
                </label>
                <label class="inline-flex items-center">
                  <input type="radio" name="sideFilter" value="T" class="sr-only">
                  <span class="px-5 py-2.5 text-base font-medium text-white bg-neutral-700 border-t border-b border-neutral-600 hover:bg-neutral-600 focus:z-10 focus:ring-2 focus:ring-[#7877c6] focus:text-white cursor-pointer flex items-center">
                    <img src={`${basePath}img/t.png`} alt="T" class="w-6 h-6 mr-2">
                    T
                  </span>
                </label>
                <label class="inline-flex items-center">
                  <input type="radio" name="sideFilter" value="CT" class="sr-only">
                  <span class="px-5 py-2.5 text-base font-medium text-white bg-neutral-700 border border-neutral-600 rounded-r-lg hover:bg-neutral-600 focus:z-10 focus:ring-2 focus:ring-[#7877c6] focus:text-white cursor-pointer flex items-center">
                    <img src={`${basePath}img/ct.png`} alt="CT" class="w-6 h-6 mr-2">
                    CT
                  </span>
                </label>
              </div>
            </div>
          </div>
        </div>

        <!-- Galería de Videos -->
        <div id="videoGallery" class="grid grid-cols-1 sm:grid-cols-2 gap-8">
          <!-- Aquí se mostrarán los videos filtrados -->
        </div>
      </div>
    </main>

    <footer class="text-center py-6 text-gray-400">
      <p>Hecho por <a href="https://twitch.tv/natxo" target="_blank" rel="noopener noreferrer" class="text-[#e0a82e]">Natxo</a> con ❤️ para mis tryhards</p>
    </footer>
  </div>

  <style>
    @import url('https://fonts.googleapis.com/css2?family=Rajdhani:wght@600;700&display=swap');

    h1 {
      font-family: 'Rajdhani', sans-serif;
    }
  </style>

  <div id="loadingScreen" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="text-white text-2xl">Cargando videos...</div>
  </div>

  <script define:vars={{ basePath }}>
    // Referencias a los elementos del DOM
    const videoGallery = document.getElementById('videoGallery');
    const mapFilter = document.getElementById('mapFilter');
    const utilityFilter = document.getElementById('utilityFilter');
    const searchBar = document.getElementById('searchBar');
    const loadingScreen = document.getElementById('loadingScreen');

    let allVideos = [];

    const sideFilter = document.querySelectorAll('input[name="sideFilter"]');

    // Función para cargar todos los videos de todos los mapas
    async function loadAllVideos() {
      const maps = ['dust2', 'inferno', 'mirage', 'ancient', 'anubis', 'vertigo', 'nuke'];
      
      for (const map of maps) {
        try {
          const response = await fetch(`${basePath}data/${map}.json`);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const videos = await response.json();
          allVideos = allVideos.concat(videos);
        } catch (error) {
          console.error(`Error cargando los videos de ${map}:`, error);
        }
      }

      loadingScreen.style.display = 'none';
      renderVideos();
    }

    // Función para renderizar los videos filtrados
    function renderVideos() {
      if (!videoGallery || !mapFilter || !utilityFilter || !searchBar) return;

      const mapValue = mapFilter.value.toLowerCase();
      const utilityValue = utilityFilter.value.toLowerCase();
      const searchValue = searchBar.value.toLowerCase();
      const sideValue = document.querySelector('input[name="sideFilter"]:checked')?.value;

      const filteredVideos = allVideos.filter(video => {
        const matchesMap = mapValue === 'all' || video.map.toLowerCase() === mapValue;
        const matchesUtility = utilityValue === 'all' || video.type.toLowerCase() === utilityValue;
        const matchesSide = sideValue === 'all' || video.side === sideValue || video.side === 'BOTH';
        const matchesSearch = video.title.toLowerCase().includes(searchValue);

        return matchesMap && matchesUtility && matchesSide && matchesSearch;
      });

      videoGallery.innerHTML = '';
      if (filteredVideos.length === 0) {
        videoGallery.innerHTML = '<p class="text-center text-white">No se encontraron videos que coincidan con los criterios de búsqueda.</p>';
        return;
      }

      filteredVideos.forEach(video => {
        const videoElement = document.createElement('div');
        videoElement.classList.add('bg-neutral-800', 'border', 'border-neutral-700', 'rounded-xl', 'overflow-hidden', 'shadow-lg', 'p-4', 'flex', 'flex-col', 'justify-between', 'transition', 'duration-300', 'hover:shadow-xl', 'hover:border-[#7877c6]');
        videoElement.innerHTML = `
          <iframe 
            src="https://www.youtube.com/embed/${getYouTubeVideoId(video.video)}" 
            frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
            allowfullscreen
            class="w-full aspect-video mb-4 rounded-lg"
          ></iframe>
          <div>
            <h3 class="text-xl font-bold text-white mb-2">${video.title}</h3>
            <div class="flex justify-between items-center">
              <p class="font-semibold text-[#7877c6]">${video.map}</p>
              <span class="text-gray-300 bg-neutral-700 px-2 py-1 rounded-full text-sm">${video.type}</span>
              <span class="text-gray-300 bg-neutral-700 px-2 py-1 rounded-full text-sm flex items-center">
                ${getSideIcon(video.side)}
                ${video.side}
              </span>
            </div>
          </div>
        `;
        videoGallery.appendChild(videoElement);
      });
    }

    // Función para extraer el ID del video de YouTube de la URL
    function getYouTubeVideoId(url) {
      const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
      const match = url.match(regExp);
      return (match && match[2].length === 11) ? match[2] : '';
    }

    // Función para obtener el icono del bando
    function getSideIcon(side) {
      if (side === 'T') {
        return `<img src="${basePath}img/t.png" alt="T" class="w-4 h-4 mr-1">`;
      } else if (side === 'CT') {
        return `<img src="${basePath}img/ct.png" alt="CT" class="w-4 h-4 mr-1">`;
      }
      return '';
    }

    // Manejar cambios en los filtros y búsqueda
    mapFilter?.addEventListener('change', renderVideos);
    utilityFilter?.addEventListener('change', renderVideos);
    searchBar?.addEventListener('input', renderVideos);
    sideFilter.forEach(radio => {
      radio.addEventListener('change', renderVideos);
    });

    // Cargar todos los videos al iniciar la página
    loadAllVideos();
  </script>
</Layout>